#include <tonto/crystal/crystal.h>
#include <tonto/io/cifparser.h>
#include <tonto/3rdparty/argparse.hpp>
#include <tonto/qm/wavefunction.h>
#include <tonto/core/logger.h>
#include <tonto/qm/hf.h>
#include <tonto/dft/dft.h>
#include <tonto/qm/scf.h>
#include <tonto/io/fchkwriter.h>
#include <tonto/io/fchkreader.h>
#include <tonto/interaction/pairinteraction.h>
#include <tonto/interaction/disp.h>
#include <tonto/interaction/polarization.h>
#include <tonto/core/kabsch.h>
#include <filesystem>
#include <tonto/core/units.h>
#include <fmt/os.h>

namespace fs = std::filesystem;
using tonto::crystal::Crystal;
using tonto::crystal::SymmetryOperation;
using tonto::chem::Molecule;
using tonto::chem::Dimer;
using tonto::qm::Wavefunction;
using tonto::qm::SpinorbitalKind;
using tonto::qm::BasisSet;
using tonto::scf::SCF;
using tonto::units::BOHR_TO_ANGSTROM;
using tonto::units::AU_TO_KJ_PER_MOL;
using tonto::interaction::CEModelInteraction;
using tonto::chem::Element;
using tonto::util::all_close;
using tonto::hf::HartreeFock;

SymmetryOperation dimer_symop(const tonto::chem::Dimer &dimer, const Crystal &crystal)
{
    const auto& a = dimer.a();
    const auto& b = dimer.b();

    int sa_int = a.asymmetric_unit_symop()(0);
    int sb_int = b.asymmetric_unit_symop()(0);

    SymmetryOperation symop_a(sa_int);
    SymmetryOperation symop_b(sb_int);

    auto symop_ab = symop_b * symop_a.inverted();
    tonto::Vec3 c_a = symop_ab(crystal.to_fractional(a.positions())).rowwise().mean();
    tonto::Vec3 v_ab = crystal.to_fractional(b.centroid()) - c_a;

    symop_ab = symop_ab.translated(v_ab);
    return symop_ab;
}

Crystal read_crystal(const std::string &filename)
{
    tonto::io::CifParser parser;
    return parser.parse_crystal(filename).value();
}

std::vector<Wavefunction> calculate_wavefunctions(const std::string &basename, const std::vector<Molecule> &molecules)
{
    const std::string method = "b3lyp";
    const std::string basis_name = "6-31G**";
    std::vector<Wavefunction> wfns;
    for(const auto& m: molecules)
    {
        fs::path fchk_path(fmt::format("{}_0.fchk", basename));
        auto dmat = fmt::output_file(fmt::format("{}_0.txt", basename));
        if(fs::exists(fchk_path)) {
            using tonto::io::FchkReader;
            FchkReader fchk(fchk_path.string());
            auto wfn = Wavefunction(fchk);
            dmat.print("{}", wfn.D);
            wfns.push_back(wfn);
        }
        else {
            BasisSet basis(basis_name, m.atoms());
            basis.set_pure(false);
            fmt::print("Loaded basis set, {} shells, {} basis functions\n", basis.size(), libint2::nbf(basis));
//            HartreeFock hf(m.atoms(), basis);
//            SCF<HartreeFock, SpinorbitalKind::Restricted> scf(hf);
            tonto::dft::DFT rks(method, basis, m.atoms(), SpinorbitalKind::Restricted);
            SCF<tonto::dft::DFT, SpinorbitalKind::Restricted> scf(rks);

            scf.set_charge_multiplicity(0, 1);
            scf.start_incremental_F_threshold = 0.0;
            double e = scf.compute_scf_energy();
            auto wfn = scf.wavefunction();
            dmat.print("{}", wfn.D);
            tonto::io::FchkWriter fchk(fchk_path.string());
            fchk.set_title(fmt::format("{} {}/{} generated by tonto-ng", fchk_path.stem(), method, basis_name));
            fchk.set_method(method);
            fchk.set_basis_name(basis_name);
            wfn.save(fchk);
            fchk.write();
            wfns.push_back(wfn);
        }
    }
    return wfns;

}


auto calculate_transform(const Wavefunction &wfn, const Molecule &m, const Crystal &c)
{
    int sint = m.asymmetric_unit_symop()(0);
    SymmetryOperation symop(sint);
    tonto::Mat3N positions = wfn.positions() * BOHR_TO_ANGSTROM;

    tonto::Mat3 rotation = c.unit_cell().direct() * symop.rotation() * c.unit_cell().inverse();
    tonto::Vec3 translation = (m.centroid() - (rotation * positions).rowwise().mean()) / BOHR_TO_ANGSTROM;
    return std::make_pair(rotation, translation);
}

void write_xyz_dimer(const std::string &filename, const Dimer &dimer)
{
    auto output = fmt::output_file(filename);
    const auto& pos = dimer.positions();
    const auto& nums = dimer.atomic_numbers();
    output.print("{}\n\n", nums.rows());
    for(size_t i = 0; i < nums.rows(); i++)
    {
        output.print("{} {} {} {}\n", Element(nums(i)).symbol(), pos(0, i), pos(1, i), pos(2, i));
    }
}

auto calculate_interaction_energy(const Dimer &dimer, const std::vector<Wavefunction> &wfns, const Crystal &crystal)
{
    const std::string model_name = "ce-b3lyp";
    Molecule mol_A = dimer.a();
    Molecule mol_B = dimer.b();
    const auto& wfna = wfns[mol_A.asymmetric_molecule_idx()];
    const auto& wfnb = wfns[mol_B.asymmetric_molecule_idx()];
    Wavefunction A = wfns[mol_A.asymmetric_molecule_idx()];
    Wavefunction B = wfns[mol_B.asymmetric_molecule_idx()];
    auto transform_a = calculate_transform(wfna, mol_A, crystal);
    A.apply_transformation(transform_a.first, transform_a.second);

    tonto::Mat3N pos_A = mol_A.positions();
    tonto::Mat3N pos_A_t = A.positions() * BOHR_TO_ANGSTROM;

    assert(all_close(pos_A, pos_A_t, 1e-5, 1e-5));

    auto transform_b = calculate_transform(wfnb, mol_B, crystal);
    B.apply_transformation(transform_b.first, transform_b.second);

    const auto &pos_B = mol_B.positions();
    const auto pos_B_t = B.positions() * BOHR_TO_ANGSTROM;
    assert(all_close(pos_A, pos_A_t, 1e-5, 1e-5));

    auto model = tonto::interaction::ce_model_from_string(model_name);

    CEModelInteraction interaction(model);

    auto interaction_energy = interaction(A, B);
    return interaction_energy;
}

int main(int argc, const char **argv) {
    argparse::ArgumentParser parser("interactions");
    parser.add_argument("input").help("Input CIF");
    parser.add_argument("-j", "--threads")
            .help("Number of threads")
            .default_value(2)
            .action([](const std::string& value) { return std::stoi(value); });
    tonto::log::set_level(tonto::log::level::info);
    spdlog::set_level(spdlog::level::info);
    using tonto::parallel::nthreads;
    nthreads = parser.get<int>("--threads");
    libint2::Shell::do_enforce_unit_normalization(false);
    libint2::initialize();

    try {
        parser.parse_args(argc, argv);
    }
    catch (const std::runtime_error& err) {
        tonto::log::error("error when parsing command line arguments: {}", err.what());
        fmt::print("{}", parser);
        exit(1);
    }



    const std::string error_format = "Exception:\n    {}\nTerminating program.\n";
    try {
        std::string filename = parser.get<std::string>("input");
        std::string basename = fs::path(filename).stem();
        Crystal c = read_crystal(filename);
        fmt::print("Loaded crystal from {}\n", filename);
        auto molecules = c.symmetry_unique_molecules();
        auto wfns = calculate_wavefunctions(basename , molecules);
        auto crystal_dimers = c.symmetry_unique_dimers(3.8);
        const auto &dimers = crystal_dimers.unique_dimers;
        fmt::print("Dimers\n");
        const std::string row_fmt_string = "{:>9.3f} {:>20s} {: 9.3f} {: 9.3f} {: 9.3f} {: 9.3f} | {: 9.3f}\n";

        std::vector<CEModelInteraction::EnergyComponents> dimer_energies;
        for(const auto& dimer: dimers)
        {
            auto s_ab = dimer_symop(dimer, c);
            write_xyz_dimer(fmt::format("{}_dimer_{}.xyz", basename, dimer_energies.size()), dimer);
            fmt::print("Calculating dimer {}\n", dimer_energies.size());
            dimer_energies.push_back(calculate_interaction_energy(dimer, wfns, c));
        }

        const auto &mol_neighbors = crystal_dimers.molecule_neighbors;
        for(size_t i = 0; i < mol_neighbors.size(); i++)
        {
            const auto& n = mol_neighbors[i];
            fmt::print("Neighbors for molecule {}\n", i);

            fmt::print("{:>9s} {:>20s} {:>9s} {:>9s} {:>9s} {:>9s} | {:>9s}\n",
                       "R", "Symop", "E_coul", "E_rep", "E_pol", "E_disp", "E_tot");
            size_t j = 0;
            CEModelInteraction::EnergyComponents total; 
            for(const auto& dimer: n)
            {
                auto s_ab = dimer_symop(dimer, c).to_string();
                size_t idx = crystal_dimers.unique_dimer_idx[i][j]; 
                double r = dimer.nearest_distance();
                const auto& e = dimer_energies[crystal_dimers.unique_dimer_idx[i][j]];
                double ecoul = e.coulomb_kjmol(), erep = e.exchange_kjmol(),
                    epol = e.polarization_kjmol(), edisp = e.dispersion_kjmol(),
                    etot = e.total_kjmol();
                total.coulomb += ecoul;
                total.exchange_repulsion += erep;
                total.polarization += epol;
                total.dispersion += edisp;
                total.total += etot;

                fmt::print(row_fmt_string, r, s_ab, ecoul, erep, epol, edisp, etot);
                j++;
            }
            fmt::print("Total: {:.3f} kJ/mol\n", total.total);
        }

     } catch (const char *ex) {
        fmt::print(error_format, ex);
        return 1;
    } catch (std::string &ex) {
        fmt::print(error_format, ex);
        return 1;
    } catch (std::exception &ex) {
        fmt::print(error_format, ex.what());
        return 1;
    } catch (...) {
        fmt::print("Exception:\n- Unknown...\n");
        return 1;
    }
   
    return 0;
}
