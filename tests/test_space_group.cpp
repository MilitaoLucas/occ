#include "util.h"
#include "spacegroup.h"
#include "catch.hpp"
#include <iostream>
#include <Eigen/Dense>

using craso::crystal::SpaceGroup;
using craso::util::all_close;


TEST_CASE("SpaceGroup constructor", "[space_group]")
{
    SpaceGroup sg14c = SpaceGroup("P21/c");
    REQUIRE(sg14c.number() == 14);
    SpaceGroup sg14a = SpaceGroup("P21/a");
    REQUIRE(sg14a.number() == 14);
    REQUIRE(sg14a.symmetry_operations().size() == 4);
}

TEST_CASE("Spacegroup symops", "[space_group]")
{
    Eigen::MatrixX3d coords(8, 3);
    coords <<
    1.650999999999999968e-01, 2.857999999999999985e-01, 1.708999999999999964e-01,
    8.939999999999999336e-02, 3.761999999999999789e-01, 3.481000000000000205e-01,
    1.819999999999999951e-01, 5.099999999999999672e-02, -1.160000000000000059e-01,
    1.280000000000000027e-01, 5.100000000000000089e-01, 4.909999999999999920e-01,
    3.300000000000000155e-02, 5.400000000000000355e-01, 2.790000000000000258e-01,
    5.299999999999999850e-02, 1.680000000000000104e-01, 4.209999999999999853e-01,
    1.287000000000000088e-01, 1.074999999999999983e-01, 0.000000000000000000e+00,
    2.529000000000000137e-01, 3.703000000000000180e-01, 1.769000000000000017e-01;

    REQUIRE(coords(0, 2) == 1.708999999999999964e-01);

    Eigen::MatrixX3d coords_expected(32, 3);
    coords_expected <<
        1.650999999999999968e-01, 2.857999999999999985e-01, 1.708999999999999964e-01,
        8.939999999999999336e-02, 3.761999999999999789e-01, 3.481000000000000205e-01,
        1.819999999999999951e-01, 5.099999999999999672e-02,-1.160000000000000059e-01,
        1.280000000000000027e-01, 5.100000000000000089e-01, 4.909999999999999920e-01,
        3.300000000000000155e-02, 5.400000000000000355e-01, 2.790000000000000258e-01,
        5.299999999999999850e-02, 1.680000000000000104e-01, 4.209999999999999853e-01,
        1.287000000000000088e-01, 1.074999999999999983e-01, 0.000000000000000000e+00,
        2.529000000000000137e-01, 3.703000000000000180e-01, 1.769000000000000017e-01,
        -1.650999999999999968e-01, 7.858000000000000540e-01, 3.291000000000000036e-01,
        -8.939999999999999336e-02, 8.761999999999999789e-01, 1.518999999999999795e-01,
        -1.819999999999999951e-01, 5.510000000000000453e-01, 6.159999999999999920e-01,
        -1.280000000000000027e-01, 1.010000000000000009e+00, 9.000000000000007994e-03,
        -3.300000000000000155e-02, 1.040000000000000036e+00, 2.209999999999999742e-01,
        -5.299999999999999850e-02, 6.680000000000000382e-01, 7.900000000000001465e-02,
        -1.287000000000000088e-01, 6.075000000000000400e-01, 5.000000000000000000e-01,
        -2.529000000000000137e-01, 8.703000000000000735e-01, 3.230999999999999983e-01,
        -1.650999999999999968e-01,-2.857999999999999985e-01,-1.708999999999999964e-01,
        -8.939999999999999336e-02,-3.761999999999999789e-01,-3.481000000000000205e-01,
        -1.819999999999999951e-01,-5.099999999999999672e-02, 1.160000000000000059e-01,
        -1.280000000000000027e-01,-5.100000000000000089e-01,-4.909999999999999920e-01,
        -3.300000000000000155e-02,-5.400000000000000355e-01,-2.790000000000000258e-01,
        -5.299999999999999850e-02,-1.680000000000000104e-01,-4.209999999999999853e-01,
        -1.287000000000000088e-01,-1.074999999999999983e-01, 0.000000000000000000e+00,
        -2.529000000000000137e-01,-3.703000000000000180e-01,-1.769000000000000017e-01,
        1.650999999999999968e-01, 2.142000000000000015e-01, 6.709000000000000519e-01,
        8.939999999999999336e-02, 1.238000000000000211e-01, 8.481000000000000760e-01,
        1.819999999999999951e-01, 4.490000000000000102e-01, 3.840000000000000080e-01,
        1.280000000000000027e-01,-1.000000000000000888e-02, 9.909999999999999920e-01,
        3.300000000000000155e-02,-4.000000000000003553e-02, 7.790000000000000258e-01,
        5.299999999999999850e-02, 3.319999999999999618e-01, 9.210000000000000409e-01,
        1.287000000000000088e-01, 3.925000000000000155e-01, 5.000000000000000000e-01,
        2.529000000000000137e-01, 1.296999999999999820e-01, 6.769000000000000572e-01;
    
    SpaceGroup sg14("P21/c");
    Eigen::Matrix3Xd asym(coords.transpose());
    auto [symops, expanded] = sg14.apply_all_symmetry_operations(asym);
    std::cout << "Value - expected\n" << expanded.transpose() - coords_expected;
    REQUIRE(all_close(expanded.transpose(), coords_expected, 1e-3, 1e-3));
}
